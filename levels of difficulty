import random
import copy

# Функция проверки, можно ли поставить число num в ячейку (row, col)
def is_valid(board, row, col, num):
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False

    start_row, start_col = (row // 3) * 3, (col // 3) * 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

# Функция решения судоку (backtracking)
def solve_sudoku(board):
    empty = find_empty(board)
    if not empty:
        return True
    
    row, col = empty
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return True
            board[row][col] = 0  # Откат изменений
    
    return False

# Поиск пустой ячейки (обозначается 0)
def find_empty(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None

# Генерация решенной сетки судоку
def generate_sudoku():
    board = [[0] * 9 for _ in range(9)]
    
    # Заполняем диагональные блоки (3x3), это ускоряет генерацию
    for i in range(0, 9, 3):
        fill_diagonal_block(board, i, i)

    solve_sudoku(board)
    return board

# Заполнение диагональных блоков (чтобы ускорить генерацию)
def fill_diagonal_block(board, row, col):
    nums = list(range(1, 10))
    random.shuffle(nums)
    for i in range(3):
        for j in range(3):
            board[row + i][col + j] = nums.pop()

# Проверка на единственное решение
def has_unique_solution(board):
    board_copy = copy.deepcopy(board)
    return count_solutions(board_copy) == 1

# Подсчет количества решений
def count_solutions(board):
    empty = find_empty(board)
    if not empty:
        return 1  # Нашли одно решение
    
    row, col = empty
    count = 0
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num
            count += count_solutions(board)
            if count > 1:
                break  # Если нашли больше одного решения – прекращаем
            board[row][col] = 0  # Откат изменений
    
    return count

# Удаление чисел для создания головоломки
def remove_numbers(board, difficulty="medium"):
    difficulties = {"easy": 30, "medium": 40, "hard": 50}
    num_to_remove = difficulties.get(difficulty, 40)

    board_copy = [row[:] for row in board]
    count = 0
    while count < num_to_remove:
        row, col = random.randint(0, 8), random.randint(0, 8)
        if board_copy[row][col] != 0:
            temp = board_copy[row][col]
            board_copy[row][col] = 0
            
            # Проверяем, осталось ли единственное решение
            if not has_unique_solution(board_copy):
                board_copy[row][col] = temp  # Откатываем изменение
                continue

            count += 1

    return board_copy

# Функция вывода судоку
def print_sudoku(board):
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("-" * 21)
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("| ", end="")
            print(board[i][j] if board[i][j] != 0 else ".", end=" ")
        print()

# Главная функция
if __name__ == "__main__":
    difficulty = input("Выберите сложность (easy, medium, hard): ").strip().lower()
    full_sudoku = generate_sudoku()
    puzzle = remove_numbers(full_sudoku, difficulty)

    print("\nСгенерированное судоку:")
    print_sudoku(puzzle)

    print("\nРешение:")
    solve_sudoku(puzzle)
    print_sudoku(puzzle)
